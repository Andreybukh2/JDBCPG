<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="f50c9144-5c70-4159-ba45-74a555ee0306" name="Changes" comment="В итоге:&#10;1. Создали Connection с нашей БД (в этом примере PG) - Config файл отвечает за соединение с БД и передачу параметров в DriverManager.getConnection;&#10;2. UserDao - содержит методы в которых прописаны SQL-запросы; По сути эти методы работают примерно по одной схеме.&#10;В них есть:&#10;connection = Config.getConnection(); - соединение с БД через методы Config&#10;statement = connection.createStatement(); - возвращает результат SQL-запроса прописанного в параметрах;&#10;Аннотации можно было конечно и не применять.&#10;@SneakyThrows - заменяет блоки try catch для &quot;отлова&quot; SQLException которое предоставляет информацию об ошибке доступа к БД.&#10;@Data - Геттеры, сеттеры;&#10;@AllArgsConstructor - передает начальные значения полей в конструктор; (можно было создать и в ручную через Alt+Insert&#10;3. UserDto - по сути содержит схему нашей таблицы (имена колонок если так можно выразиться)&#10;4. App - реализация методов через создание объекта класса;">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/UserDao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/UserDao.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2Ri7mHGxxmaWhqZUvFG2pzodHqJ" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "WebServerToolWindowFactoryState": "false",
    "last_opened_file_path": "C:/Users/Andbu/YandexDisk/IdeaProjects/JDBCPG"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "postgresql"
    ]
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="org.example" />
    </key>
  </component>
  <component name="RunManager" selected="Application.App">
    <configuration name="App" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="org.example.App" />
      <module name="JDBCPG" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ConnectionTest.testConnection" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="JDBCPG" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.example.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.example" />
      <option name="MAIN_CLASS_NAME" value="org.example.ConnectionTest" />
      <option name="METHOD_NAME" value="testConnection" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.App" />
        <item itemvalue="JUnit.ConnectionTest.testConnection" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="f50c9144-5c70-4159-ba45-74a555ee0306" name="Changes" comment="" />
      <created>1687721207097</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1687721207097</updated>
      <workItem from="1687721208379" duration="10469000" />
      <workItem from="1687794706191" duration="6995000" />
      <workItem from="1688013752517" duration="62000" />
      <workItem from="1688054699406" duration="2642000" />
      <workItem from="1688336671478" duration="336000" />
    </task>
    <task id="LOCAL-00001" summary="В итоге:&#10;1. Создали Connection с нашей БД (в этом примере PG) - Config файл отвечает за соединение с БД и передачу параметров в DriverManager.getConnection;&#10;2. UserDao - содержит методы в которых прописаны SQL-запросы; По сути эти методы работают примерно по одной схеме.&#10;В них есть:&#10;connection = Config.getConnection(); - соединение с БД через методы Config&#10;statement = connection.createStatement(); - возвращает результат SQL-запроса прописанного в параметрах;&#10;Аннотации можно было конечно и не применять.&#10;@SneakyThrows - заменяет блоки try catch для &quot;отлова&quot; SQLException которое предоставляет информацию об ошибке доступа к БД.&#10;@Data - Геттеры, сеттеры;&#10;@AllArgsConstructor - передает начальные значения полей в конструктор; (можно было создать и в ручную через Alt+Insert&#10;3. UserDto - по сути содержит схему нашей таблицы (имена колонок если так можно выразиться)&#10;4. App - реализация методов через создание объекта класса;">
      <created>1687731931334</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1687731931334</updated>
    </task>
    <option name="localTasksCounter" value="2" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="В итоге:&#10;1. Создали Connection с нашей БД (в этом примере PG) - Config файл отвечает за соединение с БД и передачу параметров в DriverManager.getConnection;&#10;2. UserDao - содержит методы в которых прописаны SQL-запросы; По сути эти методы работают примерно по одной схеме.&#10;В них есть:&#10;connection = Config.getConnection(); - соединение с БД через методы Config&#10;statement = connection.createStatement(); - возвращает результат SQL-запроса прописанного в параметрах;&#10;Аннотации можно было конечно и не применять.&#10;@SneakyThrows - заменяет блоки try catch для &quot;отлова&quot; SQLException которое предоставляет информацию об ошибке доступа к БД.&#10;@Data - Геттеры, сеттеры;&#10;@AllArgsConstructor - передает начальные значения полей в конструктор; (можно было создать и в ручную через Alt+Insert&#10;3. UserDto - по сути содержит схему нашей таблицы (имена колонок если так можно выразиться)&#10;4. App - реализация методов через создание объекта класса;" />
    <option name="LAST_COMMIT_MESSAGE" value="В итоге:&#10;1. Создали Connection с нашей БД (в этом примере PG) - Config файл отвечает за соединение с БД и передачу параметров в DriverManager.getConnection;&#10;2. UserDao - содержит методы в которых прописаны SQL-запросы; По сути эти методы работают примерно по одной схеме.&#10;В них есть:&#10;connection = Config.getConnection(); - соединение с БД через методы Config&#10;statement = connection.createStatement(); - возвращает результат SQL-запроса прописанного в параметрах;&#10;Аннотации можно было конечно и не применять.&#10;@SneakyThrows - заменяет блоки try catch для &quot;отлова&quot; SQLException которое предоставляет информацию об ошибке доступа к БД.&#10;@Data - Геттеры, сеттеры;&#10;@AllArgsConstructor - передает начальные значения полей в конструктор; (можно было создать и в ручную через Alt+Insert&#10;3. UserDto - по сути содержит схему нашей таблицы (имена колонок если так можно выразиться)&#10;4. App - реализация методов через создание объекта класса;" />
  </component>
</project>